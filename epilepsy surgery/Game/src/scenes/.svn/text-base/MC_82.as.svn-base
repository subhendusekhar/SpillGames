package src.scenes {		import flash.display.MovieClip;	import src.game.SurgeryStep;	import flash.events.MouseEvent;	import src.game.GameLogic;	import src.game.GMGSound;	import flash.media.SoundChannel;	import src.game.SoundManager;			public class MC_82 extends SurgeryStep {				private var m_currentPin:MovieClip = null;				private var m_wrongPinOver:GMGSound = null;		private var m_correctPinOver:GMGSound = null;		private var m_soundChannel:SoundChannel = null;				public function MC_82() {			m_wrongPinOver = new Brainwavesound1();			m_correctPinOver = new Brainwavesound2();			for(var i:int = 0; i < grid.numChildren; i++)			{				if(grid.getChildAt(i) is Pin1 || grid.getChildAt(i) is Pin2 || grid.getChildAt(i) is Pin3)				{					var pin:MovieClip = grid.getChildAt(i) as MovieClip;					pin.addEventListener(MouseEvent.MOUSE_OVER, pinOver);					pin.addEventListener(MouseEvent.MOUSE_OUT, pinOut);					pin.addEventListener(MouseEvent.MOUSE_MOVE, pinMove);					pin.addEventListener(MouseEvent.CLICK, pinClick);					pin.buttonMode = true;				}			}			this.stop();			scheduleForUpdate();			brainMachine.stop();		}				private function pinOver(ev:MouseEvent):void		{			m_currentPin = ev.currentTarget as MovieClip;			ev.currentTarget.gotoAndStop(2);			if(m_soundChannel != null)			{				SoundManager.sharedManager().stopSound(m_soundChannel);				m_soundChannel = null;			}			if(m_currentPin is Pin3)			{				m_soundChannel = SoundManager.sharedManager().playSound(m_correctPinOver, 9999);			}			else			{				m_soundChannel = SoundManager.sharedManager().playSound(m_wrongPinOver, 9999);			}		}				private function pinOut(ev:MouseEvent):void		{			m_currentPin = null;			ev.currentTarget.gotoAndStop(1);						if(m_soundChannel != null)			{				SoundManager.sharedManager().stopSound(m_soundChannel);				m_soundChannel = null;			}		}				private function pinMove(ev:MouseEvent):void		{			ev.currentTarget.gotoAndStop(2);		}				private function pinClick(ev:MouseEvent):void		{			ev.currentTarget.gotoAndStop(3);			ev.currentTarget.removeEventListener(MouseEvent.MOUSE_OVER, pinOver);			ev.currentTarget.removeEventListener(MouseEvent.MOUSE_OUT, pinOut);			ev.currentTarget.removeEventListener(MouseEvent.MOUSE_MOVE, pinMove);			ev.currentTarget.removeEventListener(MouseEvent.CLICK, pinClick);			ev.currentTarget.mouseEnabled = false;			ev.currentTarget.mouseChildren = false;						if(ev.currentTarget is Pin3)			{				SoundManager.sharedManager().stopSound(m_soundChannel);				GameLogic.sharedGameLogic().showSceneByName(getProperties().nextSceneName);			}			else			{				GameLogic.sharedGameLogic().punishPlayer();			}			m_currentPin = null;		}				override public function update()		{			if(m_currentPin != null)			{				if(m_currentPin is Pin1)				{					brainMachine.lines.line1.visible = true;					brainMachine.lines.line2.visible = false;					brainMachine.lines.line3.visible = false;				}				else if(m_currentPin is Pin2)				{					brainMachine.lines.line1.visible = false;					brainMachine.lines.line2.visible = true;					brainMachine.lines.line3.visible = false;				}				else if(m_currentPin is Pin3)				{					brainMachine.lines.line1.visible = false;					brainMachine.lines.line2.visible = false;					brainMachine.lines.line3.visible = true;				}			}			else			{				brainMachine.lines.line1.visible = false;				brainMachine.lines.line2.visible = false;				brainMachine.lines.line3.visible = false;			}		}	}	}