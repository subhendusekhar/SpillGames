package src.scenes {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import src.game.SurgeryStep;	import src.game.GameLogic;	import src.game.GMGSound;	import flash.media.SoundChannel;	import src.game.SoundManager;			public class MC_12 extends SurgeryStep {				public var machine:MovieClip;				public var m_currentClip;		private var m_wrongPinOver:GMGSound = null;		private var m_correctPinOver:GMGSound = null;		private var m_soundChannel:SoundChannel = null;				public function MC_12() {			m_wrongPinOver = new Brainwavesound1();			m_correctPinOver = new Brainwavesound2();						machine.machineLines.mouseEnabled = false;			machine.machineLines.mouseChildren = false;						machine.brain.wrong1.addEventListener(MouseEvent.CLICK, wrongClick);			machine.brain.wrong2.addEventListener(MouseEvent.CLICK, wrongClick);			machine.brain.correct.addEventListener(MouseEvent.CLICK, correctClick);						machine.brain.wrong1.addEventListener(MouseEvent.MOUSE_OVER, mouseOverEvent);			machine.brain.wrong2.addEventListener(MouseEvent.MOUSE_OVER, mouseOverEvent);			machine.brain.correct.addEventListener(MouseEvent.MOUSE_OVER, mouseOverEvent);						machine.brain.wrong1.addEventListener(MouseEvent.MOUSE_OUT, mouseOutEvent);			machine.brain.wrong2.addEventListener(MouseEvent.MOUSE_OUT, mouseOutEvent);			machine.brain.correct.addEventListener(MouseEvent.MOUSE_OUT, mouseOutEvent);						scheduleForUpdate();						stop();		}		function wrongClick(ev:MouseEvent):void		{			ev.currentTarget.mouseEnabled = false;			GameLogic.sharedGameLogic().punishPlayer();			ev.currentTarget.removeEventListener(MouseEvent.CLICK, wrongClick);		}		function correctClick(ev:MouseEvent):void		{			SoundManager.sharedManager().stopSound(m_soundChannel);			ev.currentTarget.removeEventListener(MouseEvent.CLICK, correctClick);			GameLogic.sharedGameLogic().showSceneByName(GameLogic.sharedGameLogic().getCurrentScene().getProperties().nextSceneName);		}		function mouseOverEvent(ev:MouseEvent):void		{			m_currentClip = ev.currentTarget;			if(m_soundChannel != null)			{				SoundManager.sharedManager().stopSound(m_soundChannel);				m_soundChannel = null;			}						if(m_currentClip.name == "correct")			{				m_soundChannel = SoundManager.sharedManager().playSound(m_correctPinOver, 9999);			}			else			{				m_soundChannel = SoundManager.sharedManager().playSound(m_wrongPinOver, 9999);			}		}		function mouseOutEvent(ev:MouseEvent):void		{			m_currentClip = null;			if(m_soundChannel != null)			{				SoundManager.sharedManager().stopSound(m_soundChannel);				m_soundChannel = null;			}		}				override public function update()		{			if(m_currentClip != null)			{				if(m_currentClip == machine.brain.wrong1)				{					machine.lines.gotoAndStop(2);				}				else if(m_currentClip == machine.brain.wrong2)				{					machine.lines.gotoAndStop(2);				}				else if(m_currentClip == machine.brain.correct)				{					machine.lines.gotoAndStop(3);				}			}			else			{				machine.lines.gotoAndStop(1);			}		}	}	}