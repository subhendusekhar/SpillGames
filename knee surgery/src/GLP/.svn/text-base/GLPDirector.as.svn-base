package src.GLP{	import src.GLP.GLPScene;		import flash.display.MovieClip;	public class GLPDirector	{		// Singleton variable for this class		private static var m_sharedDirector:GLPDirector;				// Scene swap variables		private var m_currentScene:GLPScene;		private var m_nextScene:GLPScene;		private var m_sceneList:Array = new Array();		private var m_updateQueue:Array = new Array();				// No one should instantiate this class directly, use sharedDirector() method		public function GLPDirector()		{		}				// Get method for singleton variable		public static function sharedDirector():GLPDirector		{			if(m_sharedDirector == null)			{				m_sharedDirector = new GLPDirector();			}			return m_sharedDirector;		}				// Method which will be called everytime the Application enters a loop		public function mainLoop():void		{			drawScene();		}				// Everytime the app enters a loop, the director will draw the current scene into the main frame		private function drawScene():void		{			for(var i:uint; i < m_updateQueue.length; i++)			{				GLPScene(m_updateQueue[i]).update();			}						if(m_nextScene != null)			{				setNextScene();			}						if(m_currentScene != null)			{				m_currentScene.paintScene();			}		}				// Selects the next scene as the current one, if any.		private function setNextScene():void		{			if(m_nextScene != null)			{				if(m_currentScene != null)				{					m_currentScene.onExit();					m_currentScene.unscheduleForUpdate();				}								m_currentScene = null;				m_currentScene = m_nextScene;				m_nextScene = null;								if(m_currentScene != null)				{					m_currentScene.onEnter();				}			}		}				// The next scene will be the one before the current one		public function popScene():void		{			m_sceneList.pop();			m_nextScene = m_sceneList[m_sceneList.length - 1];		}				// Sets the selected scene as the next one		public function pushScene(scene:GLPScene):void		{			m_sceneList.push(scene);			m_nextScene = scene;		}				// This method will replace the actual scene with the selected one		public function replaceScene(scene:GLPScene):void		{			m_sceneList.pop();			m_sceneList.push(scene);			m_nextScene = scene;		}				// Schedules a Scene to update each frame, adding it to the update queue		public function scheduleUpdateForScene(scene:GLPScene)		{			m_updateQueue.push(scene);		}				// Schedules a Scene to update each frame, adding it to the update queue		public function unscheduleUpdateForScene(scene:GLPScene)		{			m_updateQueue.splice(m_updateQueue.indexOf(scene), 1);		}	}}