package src.scenes {		import flash.display.MovieClip;	import src.game.GameLogic;	import src.game.SurgeryStep;	import src.game.SpilAPIManager;	import src.GLP.GLPApplication;	import flash.events.MouseEvent;	import src.GLP.Analytics;	import src.game.SoundManager;	import src.game.PlayerData;	import flash.media.SoundTransform;	import flash.media.SoundMixer;		public class GameCompleteMenu extends SurgeryStep 	{		public function GameCompleteMenu() 		{			playAsIntern.addEventListener(MouseEvent.CLICK, playIntern);			playAsSpecialist.addEventListener(MouseEvent.CLICK, playSpecialist);			mGames.addEventListener(MouseEvent.CLICK, moreGamesClick);			mainMenu.addEventListener(MouseEvent.CLICK, gotoMainMenu);						SpilAPIManager.sharedSpilAPI().localizeTextField(thanksDoc);			SpilAPIManager.sharedSpilAPI().localizeTextField(discharge);			SpilAPIManager.sharedSpilAPI().localizeTextField(localizeMistakes);			SpilAPIManager.sharedSpilAPI().localizeTextField(localizeTime);			SpilAPIManager.sharedSpilAPI().localizeTextField(localizeTotal);						if(GameLogic.sharedGameLogic().isHardMode())			{				gotoAndStop(2);				SpilAPIManager.sharedSpilAPI().localizeTextField(localizeScore);				SpilAPIManager.sharedSpilAPI().localizeTextField(localizeBonus);			}			else			{				SpilAPIManager.sharedSpilAPI().localizeTextField(hardUnlocked);								if(PlayerData.sharedData().getTimesCompleted() > 0)				{					newmode.visible = false;					hardUnlocked.visible = false;				}								gotoAndStop(1);			}						var calculatedScore:int;			var calculatedTime:int;			var calculatedMistakes:int;						calculatedTime = GameLogic.sharedGameLogic().getTimeScore();			var tf:TextField = getChildByName("time") as TextField;			tf.text = calculatedTime + "";							calculatedMistakes = GameLogic.sharedGameLogic().getMistakeScore();			tf = getChildByName("mistakes") as TextField;			tf.text = GameLogic.sharedGameLogic().getMistakes() + "x -100";						calculatedScore = calculatedTime + calculatedMistakes;							if(GameLogic.sharedGameLogic().isHardMode())			{				tf = getChildByName("score") as TextField;				tf.text = calculatedScore + "";								tf = getChildByName("bonus") as TextField;				tf.text = calculatedScore + "";				calculatedScore *= 2;			}						// Add calculated total to label			tf = getChildByName("total") as TextField;			tf.text = calculatedScore + "";						GameLogic.sharedGameLogic().sendCalculatedScore(calculatedScore);						GameLogic.sharedGameLogic().endGame();			// Send Score						// Send Awards			if(calculatedScore >= 15000)			{				SpilAPIManager.sharedSpilAPI().sendAward("award1");			}			if(GameLogic.sharedGameLogic().reachedHRMState(3))			{				SpilAPIManager.sharedSpilAPI().sendAward("award2");			}			if(GameLogic.sharedGameLogic().getTimesCompleted() >= 3)			{				SpilAPIManager.sharedSpilAPI().sendAward("award3");			}			if(GameLogic.sharedGameLogic().getTimeInSeconds() >= 90)			{				SpilAPIManager.sharedSpilAPI().sendAward("award4");			}			if(GameLogic.sharedGameLogic().getMistakes() == 0)			{				SpilAPIManager.sharedSpilAPI().sendAward("award5");			}						if(avatarButton != null)			{				avatarButton.clickheretext.mouseEnabled = false;				avatarButton.button.addEventListener(MouseEvent.CLICK, gotoAvatarMenu);			}		}				private function playIntern(ev:MouseEvent)		{			GameLogic.sharedGameLogic().startGame(false, GameLogic.sharedGameLogic().isNoBlood());		}				private function playSpecialist(ev:MouseEvent)		{			GameLogic.sharedGameLogic().startGame(true, GameLogic.sharedGameLogic().isNoBlood());		}				private function moreGamesClick(ev:MouseEvent)		{			SpilAPIManager.sharedSpilAPI().navigateToMoreGames();			Analytics.CustomMetric("seeding link level complete clicked");		}				private function gotoMainMenu(ev:MouseEvent)		{			SpilAPIManager.sharedSpilAPI().navigateToOnGameAd();		}				private function gotoAvatarMenu(ev:MouseEvent)		{			GameLogic.sharedGameLogic().showSceneByName("src.scenes.AvatarMenu");		}				override public function continueScene():void		{			super.continueScene();			GameLogic.sharedGameLogic().showSceneByName("src.scenes.MainMenu");		}	}}